TITLE MASM Template						(main.asm)

INCLUDE Irvine32.inc

; hovorime prekladacu, ze ked na to narazi, nech sa tvari, ze to pozna, linker to zlinkuje po preklade a vsetko bude ok
; musel som uviest aj formalne parametre, inak sa kompilator stazoval, ked som predal argument
IntToStr PROTO, paOutputStringOffset:DWord

.data
; jednotlive cifry ako znaky uz spredu a ukoncene nulovym znakom
Number DB 10 dup(?)

.code
main PROC
	call Clrscr

	; 1. Vypiste obsah registra AX v desiatkovej sustave. Zakaz pouzivat WriteInt!
	mov EAX, -25530; cislo, ktore nas zaujima je v AX (cize cislo cca od -32000 do 32000)
	; volame proceduru a predavame adresu zaciatku vystupneho retazca ako argument, sem zacne procedura zapisovat
	invoke IntToStr, offset Number

	; nasledne prevedene cislo na string vypiseme
	mov EDX, offset Number
	call WriteString

	exit
main ENDP

; registre, ktore menime, uvadzame v deklaracii, povodne hodnoty sa ulozia do stacku pred vykonanim procedury
; a obnovia sa po jej skonceni, mozeme teda s kludom v procedure menit ich hodnoty a neovplyvnime hlavny program
; jeden parameter - adresa vystupneho retazca (preto double word - offset je 32-bit. hodnota)
IntToStr PROC USES EAX EBX ECX EDX ESI paOutputStringOffset:DWord
; 2 lokalne premenne, Divider (delenec) je Word kvoli sposobu delenia (vid tab. 5, druhy riadok: http://frdsa.fri.uniza.sk/~janosik/Kniha/Instr_arit.html)
LOCAL Divider:Word
LOCAL Negative:Byte

	mov Divider, 10
	mov Negative, 0

	; osetrenie zapornych cisel
	test AX, 0FFFFh; nastavi flagy podla sucinu AX s pravym operandom, zaujima nas SF (Sign Flag)
	jns Positive; jump if not sign
	mov Negative, 1; ak je zaporne, nastavime priznak
	Positive:

	mov EBX, paOutputStringOffset; adresa vystupneho retazca skopirovana do EBX (nie je nutne)
	xor ESI, ESI; pocitadlo znakov

	Division:
		xor DX, DX; upratujem - nulujem kvoli deleni, je tu vyssi word delenca a po vydeleni aj zvysok
		
		; osetrenie zaporneho cisla
		cmp Negative, 1
		jnz L1; jump if not zero
		not DX; cislo je zaporne (najvyssi bit AX je 1), vo vyssom worde delenca (DX) nastavim same 1 - invertujem 0
		L1:

		; odteraz pracujem s DX kvoli stacku, aj ked staci DL, ale stack pracuje iba so 16 alebo 32-bit. registrami
		idiv Divider; podiel v AX, zvysok v DX (zvysok je medzi 0 az 9 - je teda v DL, ale pracujem s DX kvoli stacku)

		; osetrenie zaporneho cisla
		cmp Negative, 1
		jnz L2; jump if not zero
		neg DX; ak je zaporne cislo, zvysok je zaporny, musim B2 komplement
		L2:

		; opat pracujem s DX, lebo push podporuje len 16 a 32 bit. hodnoty
		or DX, 30h; maska - prevod cisla na znak, pozri ASCII tabulku
		; cifry ziskavam odzadu, takze ich pushujem do zasobnika a na konci ich z vrchu precitam a premiestnim do vystupneho retazca
		push DX		
		inc ESI; ESI uchovava pocet zapisanych znakov
		
		cmp AX, 0; ak je delenec uz nulovy, presiel som cele cislo -> koniec
		jnz Division; jump if not zero

	mov ECX, ESI; kolkokrat som sa posunul v registri ESI, tolko cifier som nasiel, tolkokrat teda pojde aj cyklus

	; osetrenie zaporneho cisla
	cmp Negative, 1
	jnz L3; jump if not zero
	; ak je cislo zaporne, na vrchol zasobnika este vlozim '-' - prvy znak zaporneho cisla
	push word ptr '-'; konstantu ulozi defaultne ako 32-bit., my ale chceme vsetko ukladat ako wordy
	add ECX, 1; pridali sme dalsi znak - minus, inkrementujeme teda pocet znakov
	L3:

	xor ESI, ESI; posuvny (indexovy) register, posuvame sa nim vo vystupnom retazci

	Print:
		; vyberam do AX (16-bit. registra), lebo to je najmensi mozny podporovany, potrebny ASCII kod znaku je ale uz aj v AL
		pop AX; vyberiem znak z vrcholu zasobnika (posledny pridany), je to prvy znak vysledneho cisla (lebo boli ukladane odzadu)
		mov [EBX + ESI], AL; vlozim ho do vystupneho retazca
		inc ESI
		loop Print; loop dekrementuje ECX a ak je rozny od 0, skoci na navestie

	; nakoniec pridame nulovy znak - ukoncovac stringu
	mov byte ptr [EBX + ESI], 0

	ret
IntToStr ENDP

END main